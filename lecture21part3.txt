going to get is n from the variable Gadget and 2 times M from the class Gadget okay and this is the number of edges you're going to get in the cut if you had a not all equal satisfying assignment okay and so this is what we said this parameter K to be okay so I kind of cheated so far I didn't tell you what this parameter K was so now let me tell you it's going to be n plus 2m okay so that's the parameter n Plus 2. okay so if you are not all equal satisfying assignment you have a partition that produces n plus two images in the cut conversely if you had a cut right if you had a cut so now let's go the other way so suppose now that you have a cut your your way of partitioning the graph into two pieces s and t such that the number of edges Crossing is n plus 2m or even larger maybe n plus 2 m so what can you say about the partition well every Clause Gadget can contribute at most two edges to the cut right this is every Clause Gadget is a triangle you cannot partition a triangle into two pieces to get more than two edges in the card so every class Gadget can contribute at most two edges to each card and there at most n variable edges right there are at most n variable edges the edges we drew first up they're n of them and so so if you have n plus two M edges in the cut you must be getting two for each Clause Gadget because that's as much as you can get and you must be getting all the variable edges yeah this is the only way to get a cut of the size so now if you take all these things together you see that for every literal since all the variable edges are crossing cut for every literal one of the copies of literals on this side and the negated one is on the other side okay so you can set the assignment x i so now you you get a satisfying assignment by setting x i to one if the vertex x i is in T and you set it to 0 if the vertex is an s okay so you sort of reverse the same process that we used to define the cut on the first Direction you kind of reverse it you say that if a letter lies in s we set it to zero and if a literal lies in t we set it to one so you can reverse the same process and this is guaranteed to be a not all equal satisfying assignment because the cut produces two edges for each class Gadget the only way it can produce two edges for each class Gadget is if you had a not all equal satisfying assignment all right so it's kind of a little bit of a mouthful but I hope that uh you will agree that it's somewhat well motivated at least and if you go back and think about it I think a little bit and play around with these things you get better intuition into what's going on okay all right so that brings us to the end of the first half of this lecture so let's take a 15 minute break and come back and talk about tsp stop foreign let's dive into it again so uh uh so just just after we went on a break I realized that there was there was a small uh Wrinkle in the reductions I spoke about in the first half a lecture which I hadn't kind of handled so when we talk about three CNF formulas of course we have Clauses so with three but we also have class of width 2 and width one right smaller width classes right and here when I did the reduction sort of implicitly assumed that all the Clauses are with three okay so in these kinds of reductions you also have to do something slightly different for Clause of width two and with one in particular when you start from Nae sat there's nothing to do for class with one right because if you have a class of bits one we know it's not an a satisfiable you can kind of give whatever answer you like so um I mean you know that's not a satisfiable but if you have class of width two you have to be a little careful and design the reduction appropriately so if you have a class of width 2 what would you do here so for instance if you had a clause of width 2 like not x three or not X4 how would you do this well uh one thing you could do is create now a gadget between these two vertices and that Gadget a very simple way of creating a graduate is just to put a pair of parallel edges so you put not X3 and not X4 so you just put a pair of parallel edges between them and again you have the the same property for this gadget that you had for the triangle you can only get a cut of size two and you can only do that when you have a not all equal satisfying assignment the two literals go to opposite sides okay so that's uh so it's exactly the same thing and then you do the argument just like before and it works out in the same way okay so this is how you do handy class of width2 class of width one you don't have because if it's any set then they're not going to be closer with one so you can ignore cases when you have that all right so that was a small thing and it's also for the three coloring case again you have to handle class of width two and I leave that for you as a small exercise to check how you would handle clouds of width too okay it's like just by modifying the construction slightly uh you have to do something different for class of width two but it's very much in line with what we did already so I hope you think about it and kind of figure it out all right so that's uh all I wanted to say about Max cart and three coloring and now we're going to move on to um well I would call this sort of the most uh creative reduction in this section on graph theoretic problems which is what will help us show that tsp is np-complete okay so now we're going to talk about a certain variant of the thp problem well it's it's kind of like um it's closely related it's not exactly tsp it's closely related it's called The Hamilton path problem okay so what's a Hamilton path in a graph so again let's draw some sort of graph maybe we'll start with the graph that we had before okay what we call these maybe a b c and d yeah and uh just to make it a little bit more interesting let me draw a couple more edges up here so let's say E and F okay so these are this is a graph with six vertices so now a Hamilton path in such a graph is a path that starts at one of the vertices and then visits all the other vertices of the graph exactly once so it starts at some vertex because it's all the vertices the graph exactly once and ends up somewhere else right so it's slightly different from TSP right so tsp for one is not a path it's a tour you end back where you start it whereas in a path you end somewhere else and but otherwise it's very similar because again you visit every vertex exactly once okay and the underlying decision problem is given a graph like this does it contain a Hamilton path right so you can see that this graph does so a Hamilton path in this graph must start there's a Vertex here of degree one so it must start at this vertex and end at that Vertex or vice versa if you look at in Reverse so it starts here and you can kind of I guess go like this like this like this and up here that's that's a simple Hamilton path in this graph and in general given a graph sheet does it contain a hamiltonian path so it's slightly different from TSP you can see it's closely related because again we are supposed to visit everything exactly once but it's a little bit different in the sense that there are no distances and of course you have this slight modification in that you have a path not a cycle yeah you don't kind of end back where you start it okay this is say penal problem make sense again it's an NP you could just give me a Hamilton path and I would be able to check that it's a valid Hamilton path right so uh it's easy to verify so it's an NP and we will show that it's NP hard okay and this time we will actually reduce from three side okay not any sat so now we are done with an a set at least for a while and we just reduce three sat to hamiltonian path and again so we want to start with the Formula F and we want to produce a graph G as the graph G has a hamiltonian path exactly when the formula is satisfiable okay so let's start building this so this is going to be a little bit more involved than what we saw with the coloring and Max cut and um so we'll build uh to it in a few stages so but at a high level what we're going to do is again it's our similar we're going to have variable gadgets we're going to have class gadgets all these going to be graphs and they're going to be connected to each other in interesting ways that ensure that Hamilton is City in the graph corresponds to satisfying assignments in the CNF formula we still have to do the same thing we're still going to do it with gadgets but the gadget is going to be different and my opinion is a little bit more involved okay so so this is roughly what the gadgets are going to look like so it's very easy to describe what a class Gadget is here and it's our old friend the triangle okay okay so it's just a triangle like this so given a clause I'm just going to draw a triangle corresponding to uh the three literals that might appear in the class okay again you'll have to do something different for class of width two but it's very similar so let's start with this and now but the difference is that these are not going to be edges in the original graph okay these are not really going to be edges so we'll call them virtual edges for now because at a high level we want to create a structure like this like a triangle but what these are actually going to be in the underlying graph is they're going to be paths so they're going to be lots of little vertices along these yeah so they're going to be maybe a few little vertices along these these are going to be Parts along these yeah and so now a Hamilton path in the graph is going to have to go through all the vertices in this graph including the vertices on the boundary and these vertices sorry the vertices and the corners and these vertices along these paths and the main observation is that if you had a Hamilton path it can't sort of go through all these things right it can't kind of go like this like this like this because now it's visited something twice okay so it's just not possible so the way we'll set up the class Gadget is that by itself it just will not have a Hamilton path but it's going to have a Hamilton path of because of how it relates to the variable gadgets yeah and these different sides to this triangle are going to correspond to a different literals and one the literal that sort of satisfies this Clause is going to take care of these internal vertices over here okay so that's how we're going to get Hamilton path we're going to take the path is going to contain these vertices for one in one way and then it's going to contain the other vertices in another way so all of this very high level I'm just trying to give you an idea of how the reduction goes we're going to get into the details pretty quickly okay but that's essentially the idea of the class Gadget it's a big triangle but the edges are virtual edges in the sense that they become paths in the final reduction okay so the variable Gadget so now let's get to a variable Gadget we'll come back to the class Gadget in detail in a bit okay so variable Gadget so again there's some virtual edges involved but this is sort of I think uh nicer and easier to understand so so let's start constructing the graph here so we start with some vertex of degree one on the top okay and the Hamilton path is going to start at this vertex so it's going to come down yeah and now I create a little Gadget that corresponds to the variable X1 okay and so what is this little Gadget it's sort of two virtual edges so these are going to be paths in the final graph okay so the two virtual edges kind of correspond to X1 yeah and so intuitively now in the Hamilton path you can kind of go from this vertex so you start from this vertex you come down here and now you can go to the next vertex by either taking the left path or the right path the left Edge or the right virtual Edge and that's going to correspond to setting X1 to 0 or to one okay that's the two choices so this is maybe X1 equals zero so when I pick it here this is X1 equals 0 and this is X1 equals 1. okay so these are two choices yeah so now the path is going to have maybe let's say the path came here and then it took the left part down here so let me just draw it in a dotted way so let's say it came down here now what can a path Do Well it can't go back right because if it went back it would have to visit this vertex again and that would be a problem that's not a hamiltonian path anymore so it's going to have to come down and below this we put the gadget corresponding to X2 similar yeah and below that we put the gadget correspond to X3 which is again similar and we keep going this way for all the variables in the graph I am sorry all the variables in the CNF formula okay so so let's just write down the example from up there so let's say X1 or X2 or not X3 and not x one or X2 or X3 you could of course more Clauses yeah but depending on however many variables you have you would have lots of these variable gadgets yeah you had 10 variables you'd have 10 of these variable gadgets but again so a hamiltonian path would kind of make a choice for X1 then come down then make a choice for X2 they've come down and make a choice for X3 etcetera and that kind of corresponds to choosing whether to set x 1 to 0 or 1 x 2 to 0 or 1 x 3 to 0 or 1 etcetera okay and so that's the variable gadget for you and after having done all that it comes down to this bottom vertex here which is sort of shaded there are going to be a few shaded vertices here and then it's going to do something else okay and that something else is going to correspond to the Clause gadgets and the way the class gadgets relate to the variable gadgets does it make sense so far because the variable Gadget make sense it's kind of still high level but uh yeah so you see the the fact that yeah we have two choices for each variable right so that's that's part of the main point to understand here okay so now let's kind of describe where the class gadgets enter the picture so this is where they enter the picture right so now I'm going to take a class Gadget and there's going to be one class Gadget of course per clause right let's start drawing this in a little bit more detail so let's take the first class for instance so it's got an X1 in X2 and a not X3 so I have an X1 here X2 and the not X3 okay and so this is going to be the class Gadget and the edges the virtual edges of this class Gadget so it's not the vertices of the classroom but the edges of the class Gadget are going to correspond to the literals okay so maybe this Edge corresponds to X1 this Edge corresponds to let's say not X3 and this Edge corresponds to X2 Maybe so you have three edges in this class Gadget and they're going to correspond to the three different literals yeah and so now what does correspond mean that means that we are going to link up uh this edge with this Edge okay so these are as I said virtual edges so they're going to be paths and these parts are going to kind of share something okay and after describe what they share okay this is and this is the really clever construction here uh yeah so we're also going to end yeah maybe it's also worth saying that these are all shaded vertices so I'll have to tell you what to do with the Shaded vertices towards the end of the thing and there's also a shaded vertex down here that ends with a vertex of degree one okay so so the hamiltonian path again is going to start with this vertex of degree one it's going to make all these choices that's going to do something for the class gadgets and then it's going to end up here okay but I have to tell you still a whole lot of stuff in order to tell you how the whole thing is linked up to see where the hamiltonian path actually does this all right so the first step is how the class gadgets are connected to the variable gadgets and this is really the crucial part of the reduction is this kind of Gadget okay so this gadget sort of um yeah I mean again you have to decide what you want to do and once you decide the purpose of your graph you can kind of come up with a suitable graph that does it and in this case the purpose we have is this thing called xor property of this gadget so it's called an xor Gadget so what is the property of this gadget so let's draw this gadget here so let me draw it here and explain it okay so it's this funny Gadget and this is the gadget if you're going to use to link up these things here but what's the purpose of this gadget okay the property that we will use about this gadget is the following so this is going to appear somewhere in many places in our graph but the property is the following so suppose you had a Hamilton path in this graph right so suppose you had a path in the description hamiltonian path so you could enter this gadget from one of two places so you could enter it this way right so these things are not going to be connected to anything else okay so they're just going to be as they are so if you enter the gadget this way from here yeah well how could you you have to visit all the vertices in this part so what what could you do well what you could do is you could follow the zigzag pattern uh yeah and exit this way right this is something you could do right you could also enter from the top and do the opposite exact pattern and the claim is these are the only two things you can do okay so if you no matter if you enter from the uh the bottom then you kind of have to exit at the bottom after having done this exact part in or if you enter from the top you must do the zigzag pattern and enter the exit at the top yeah nothing else is possible okay so you could of course do this could kind of Escape off into Infinity by kind of starting at the bottom and ending up at the top but then look at this vertex here it sort of left a kind of it's been abandoned and the hamiltonian path can't come back and visit it okay so you've left this vertex to be okay so you're not going to create a hamiltonian path this way yeah so you could of course enter this gadget in some way and exit in some other way but then you would not get a Hamilton path so the only way to get Hamilton path in a Hamilton path you must enter and exit in the same sort of either at both at the top or both at the back home after having covered all the vertices in this exact way okay and that's the property of the xor gadget that we're going to exploit okay so the gadget has been designed to create to have this property this is the main property okay does it make sense I mean okay so it's a very clever Gadget yeah so now let's see how it fits in in our reduction so what we're going to do is sort of we're going to put a copy of this gadget between this virtual Edge and this virtual age okay so that's kind of what we're going to do and we're going to repeat that process so so the three uh edges of this Clause up here they correspond to oh I see so in my figure I've taken X1 equals 1 to be on the left side and X1
