distinct colors right the color zero one and two so all three yeah and so now how we're going to color this with zeros one and two well what we see is that two of these guys have neighbor one up there and two of these guys have neighbor one up there so to be a little bit more careful with this one whereas only one of them has a neighbor 0 up here so I can be a little bit more relaxed with this one so I look at the ones that have a neighbor one up there and I color one of them zero and I color the other one too okay and this one I color one okay so now color one so in general this is how you can extend a not all equal satisfying assignment to the literals to a valid covering of the Clause Gadget yeah so what you do is you look at what occurs more often maybe zero occurs more often or one occurs more often and you color the neighbors of the thing that occurs more often with the two and the opposite Boolean value and you color the third Vertex or the triangles with the other Boolean value okay and this this kind of strategy allows you to take a not all equal satisfying assignment to the literals to a valid coloring of the of the triangle corresponder class Gadget yeah so this is kind of a small check that I encourage you to go back and do for yourself but the more interesting thing is what happens when there is no when it's not in not all equal satisfying assignments so for instance if this was one right if this was one then all the three literals of the Clause are set to one right so all of them are set to 1 which means that in a valid three coloring none of these three vertices can be set to one right and if none of these three vertices can be set to one they must all be colored zero or two right which is not possible in a triangle you cannot color the three vertices of the triangle which is two colors so it's not possible to do this okay so if all the three vertices have the same color on the three vertices in the variable Gadget have the same color which is to say it's a it's a not a not all equal satisfying assignment then there's no way to kind of extend that coloring to the triangle on the other hand if there is any sort of not all equal satisfying assignment up there you can extend it to coloring of the triangle in a suitable way okay does it make sense okay yeah so that's that's essentially the idea of the reduction so it's a it's a it's a very clever uh it's a short reduction it's really clever because it involves the creation of this class Gadget that does the right thing for us and checks this not all equal property so we created this way a graph with something like I don't know um so how many vertices do we have something like Big O of n plus M vertices and roughly that many edges as well yeah so right and plus m h is and the property that we've created that of this graph is that if is In N A sat then the graph is three colorable and vice versa right so it also goes the other way if the graph is three colorable then we get an NA satisfying assignment yeah and we've sort of seen this in the argument that I did while I was drawing the graph but let's just quickly go through it to see uh exactly what we did so if you start within any satisfying assignment right so this is an NAE satisfying assignment then you can transfer this to a graph coloring by sort of coloring so we color the vertices according to the satisfying assignment right so the satisfying assignment sets x 1 to 0 then you take that X1 and set it to zero not x one to one and so on you color the vertices according to satisfying assignment and then kind of extend that to the Clause Gadget in the way that we saw right and extend it to the class gadgets right and this is Possible only because it's an NAE satisfying assignment so if you look at the neighbors of any Clause you don't see all zeros or all ones and hence you're able to extend it right conversely if you had a coloring up here I mean coloring of the graph so maybe you have a bunch of colors c one through c n right if you have a valid three coloring then you can kind of extract the N A satisfying assignment by just looking at the colors of the variable Gadget yeah so here you get in any satisfying assignment by using the colors of the variable Gadget right and you turn that into in any satisfying assignment and and of course this reduction is efficient right you can easily produce this graph in polynomial time uh and therefore you have a polynomial time reduction from any sat to three coloring that shows the three colorings and we hired we know it's an NP so it's NP complete okay so questions about this reduction Okay so if that was reasonably clear we are going to kind of move on to the next problem along these lines it's kind of very similar to this one with a slightly different flavor and it's called the max cut problem okay so so the max cut problem so what is the max cut problem uh so it's kind of related to the two coloring problem okay so so we uh if you remember from way back when when we started this module uh we noted that the two coloring problem has an efficient polynomial time algorithm but the three coloring one doesn't seem to okay and the three color problem we've just shown that it's NP complete but the three two current problem is polynomial time so it's kind of a nice study in contrast uh somehow you're able to check that a graph can be colored with two colors but not with three colors okay but now let's look at a Twist on the two coloring problem so let's start with this same example that we have here yeah and let's imagine that we wanted to now color this graph which is two colors right and we can't do it because there's a triangle up here it's a triangle so we cannot do it but instead suppose I want to color it which is two colors in a way that as many edges as possible are properly colored yeah so I know that I cannot color this graph so at every Edge is properly colored I cannot ensure that the endpoints of every Edge get different colors but whatever I just want to maximize the number of edges whose end points get different colors okay so I just want to maximize this number and so this is an optimization problem here so what I want to do is now I want to color the vertices of this graph with two colors and I want to maximize the number of edges that get uh whose end points get different colors so what I will do is now instead color this vertex one okay and so what this will ensure is that okay not all edges are properly two colored for instance the vertical Edge BD is not properly to colored but all the other edges are okay so I can definitely color the graph with the vertices of graph with two colors so that four out of the five edges are properly colored yeah and this is sort of what we want to do with this problem of Max cut we have just two colors right zero and one or another way of thinking about it is that we are trying to partition the vertices of this graph into two parts so these are the part this is the part that's colored zero and this is the part that's colored one okay so we are trying to partition the vertices or graph it to two parts and in the statement of the problem on the slide we call this this part s and this part t yeah so we're trying to partition the vertices of graph into two parts s and t such that we maximize the number of edges that are sort of going between the two parts that are going from s to T yeah so we're trying to we don't want edges that are kind of contained inside one of the parts like this one okay if you want to maximize the number of edges that are going across the two parts and that's essentially the max cut problem so it's it's an optimization problem because we're trying to maximize some quantity so of course when we state it as a language we kind of turn it into a decision version by saying that is there a Max cut of size at least is there a cut of size at least K so there's some sort of Target value K and we ask if there is a way of partitioning the graph into two pieces s and t such that the number of edges between s and t is at least k okay so in the example that we have we have a way of partitioning the graph into two pieces this is the number of edges between the two pieces is at least four so this so this graph and a parameter four would be a yes instance to the problem but in general what you want to know is so so if I wanted to find Max cut as a language I would look at pairs G graph and the number K and such that there is a partition s Union T of the vertices of the graph such that ah the number of edges between s and t is at least okay so there's some sort of Target value K and I ask is there a way of uh doing it so that there are at least K edges between the two points does it make sense the problem the statement of the problem okay all right so that's that's the problem that we have now so it's kind of like an optimization version of two coloring if you want yeah and we will show that this problem is actually NP complete okay it should also sort of remind you of the um the Min cut problem that you've seen already in this course right so you've seen the Ford focusing algorithm and variance of this which is really with Max flow and you know this Max flow Min cut theorem that relates the max flow and Main cut in a graph and you know that the minimum cut in a graph as a result can be efficiently computed right whereas what we are going to see is now that the maximum cut if you want to maximize the size the cut this problem is actually very difficult it can be complete okay so it's another way to maybe relate it to something you've seen before Okay so so how's this reduction going to go yeah again it's going to be a reduction from any sat uh to Max cut and so we start within uh with the in any with the CNA formula and we produce both a graph and a parameter key okay the hope is that uh the formula is any satisfiable exactly when the graph has a cut or size at least K with at least K edges going across the partition yeah Okay so so let's do it so it's a again it's a fairly simple reduction uh it's clever so let's start with an example and maybe um so on and Maybe okay so something like this all right so you could have of course more and add more classes yeah and so I'm going to reduce now produce a graph right and we're going to argue about the cut of the graph but to make my life a little bit simple what I'm going to do is that instead of producing a graph I'll produce a graph which is what is called a multi graph so it's a graph that's going to have parallel edges so we're going to reduce uh we're going to reduce to Max cut on graphs with parallel edges so multiple edges between the same pair of vertices so I'm going to kind of cheat a little bit and produce a graph which is not really a graph graph but a graph has parallel edges it turns out that you can fix this and produce a a normal graph without parallel edges but that's a little bit more work and so I it's kind of easier to show this and we leave the kind of the fix to produce a general a proper graph as an exercise okay you'll see it probably in a tutorial or something so let's see how to produce this graph now with parallel edges and again is that we will have a variable Gadget and a class Gadget okay and what we are trying to enforce is that when a word when uh so we're going to have vertices again corresponding to the literals of the graph so we have an x one and a not x one and nx2 and a not X2 and so on so I have four variables up here so I'm going to put four of these pairs and what we're trying to kind of Ensure is that uh when a when a literal goes into s right that kind of corresponds to setting that literal to zero like coloring the vertex here to zero when you put a little into s the corresponds to setting the literal to zero and when you put a literal into T that corresponds to setting the literal to one okay that's what we want to ensure so in particular what we want to ensure is that x x 1 and not x one go to different sides right there one of them goes into s and one of them goes into T we want them to go to different signs okay we can't force that right because in the definition of the problem you could take choose any partition you like you can partition the vertices any way you like but what we will do is we'll ensure that every optimal solution has X1 and not x one and opposite sides X2 and not X2 on opposite sides and so on okay and the way we will ensure that is very very simple we'll just put an edge between X1 and not x one okay so this is the variable Gadget in this case it's extremely simple so it's just a bunch of these literal vertices and then you just put an H between them okay and this encourages the optimal solution to put X1 and not X1 on different sides because the optimal solution is trying to maximize the number of edges between s and t and since you have these edges it will try to put them on opposite sides okay so that's that's a variable Gadget very simple okay and so now we're going to talk about the class Gadget so what's the class Gadget so again the Clause Gadget is a triangle okay so it's again a triangle so we're going to use triangles at least three times today so there's also a triangle okay and now what's the triangle going to be the triangle though it's going to kind of be superimposed this time on these vertices instead of being a separate triangle we're just going to superimpose it so we're again going to take the vertices x one not X2 and X3 and we're just going to put the triangle right here okay that's my first triangle and the second triangle is going to be between X1 not x two and not x 3 again yeah and this is where you see that you start getting multiple edges so you have X1 and not x 2 but then you put another Edge between X1 and not X 2. and now put an H between X1 and not x three and not X2 and X not X three and then the final clause which is not x one X2 and X4 okay so that's three triangles that I kind of superimposed on this graph and that's the instance Max okay and of course if you have more classes you're going to have to put in more things okay does the reduction make sense sort of how I defined it it makes sense okay so why triangles right so why why do we want to do a triangle so let's just draw one of these triangles separately here right so suppose this triangle was x one not X2 and X3 so the idea is the following if you're going to partition the vertices of this graph into two parts right so what could happen to these three vertices in the graph what could happen to these three vertices well it could be that they all end up inside s all all end up inside T right it could happen that all of these vertices are on inside s or all these vertices inside T in which case none of these edges kind of contribute to the cut right none of these edges are going across but if you have a not all equal satisfying assignment right and not all equal satisfying assignment then we kind of put the lit the true literals in T and the false literals in s right so for instance if you start off with the not all equal satisfying assignment X1 X3 is set to 0 and X2 not X2 is set to 1. so if you start off with this not all equal satisfying assignment then that corresponds to partitioning the vertices this way right and the vertices on this side are s and the vertices on the side are t and if you have if you partition the vertices of this triangle this way you get two edges in the cut two edges in the cut and you can never get more than two edges in the cut in a triangle right no matter how you partition the vertices you are triangle into two parts you're only going to get two edges at most and this will give you exactly two edges this is the best that you can do ok so this is why triangles are useful in this reduction if you partition the vertices according to a not all equal satisfying assignment then you get two edges in the cut which is the maximum that you can get in a triangle if you don't partition it according to a not all equal satisfying assignment then you get no edges in the cut you know all of them end up on the Zero side all of them end up on one side and then you don't get anything okay so sort of finding a not all equal satisfying assignment bumps up the number of edges in the cut and that's what's going to help us the reduction okay so that's the intuition behind using a triangle and we've done done the reduction already so let's just now analyze it so it's it's very simple so you start with this CNF formula and you produce a graph right produce the graph so suppose I had a not all equal satisfying assignment here x 1 to x n is a not all equal satisfying assignment right and now I'm going to turn this into a partition of my vertices of my graph and I already told you how I'm going to do that I'm going to take s to be all the literals that are set to 0. and I'm going to take T to be all the literals set to 1. yeah so that's how I'm going to partition My Graph into two pieces I'm going to take all the little set to 0 on one side all the letters hit one on the other side okay and so now what does this tell me about the size of the cut so how big is this cut how big is this cut so the number of edges Crossing number of edges between s and t right how much is that well let's see right so let's start with some sort of not all equal satisfying assignment up here so maybe I had a 1 here 0 here let me set not x two to one so again I'm going to get a 1 oh I might get in trouble here so so let me set not X2 to 0. uh negative 1 0 1. and uh what do I get here 0 1 and let me put X4 to 1 as well okay so that's my not all equal satisfying assignment all right so I have a not all equal satisfying assignment so what I'm going to do is I'm going to take all the vertices all the literals are set to one I'm going these These are in t so this is in t there's an S this is in uh this is in t there's an S this is in and this is an S this is T and this is in t this is an s okay so that's how I partition the vertices into two parts and what you see is that of course if the two literals corresponding to the same variable they go on opposite sides right so we are we are going to get at least the number of variables so from the variable Gadget we are going to get however many variables there are so let's say they're n variables so let me write here that there's a formula with n variables and M clauses so we are going to get n all of the N edges from the variable Gadget in the cut yeah all the N parallel edges that we drew first up all of those are going to go into the cut because one of the sides is set to 0 and the other side set to 1. okay I'll think and now what about the class Gadget so in the Triangle I so this is how we Define the triangle we Define the triangle so that when you have a partition corresponding or not all equal satisfying assignment you get exactly two edges in the cut so every Clause Gadget is going to add two edges to the cut so the number of edges you're
