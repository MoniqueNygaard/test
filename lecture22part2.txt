to the problem make sense okay all right so let's so we're going to come back and prove that this problem is NP complete but first what we're going to do in maybe uh in the next few minutes is to start from this problem and show that a bunch of other set problems are entry complete okay so this is a great starting point for reductions so we're going to start from this problem and show that some other problems are going to be complete and these are these other problems that show up slightly more are more common in applications so in particular some of these problems have have shown up earlier in this course as well when you were talking about modeling things via linear where integer linear programs uh you saw this problem of set cover yeah it came up in some problem about Airline scheduling where you have a bunch of Airline Crews and you have an airline company that has I don't know lots of legs lots of flights I want to fly and watch at least one crew to take care of each leg something like this okay but anyway I'm going to recall the definition of the problem it's a fairly natural problem that shows up in all sorts of practical scenarios so let me start with this problem of set cover which I think is the most natural one so the input is a set system of this kind when I said system of this and you're also given a budget b okay and what you want to do is you want to choose a collection of sub a collection of subsets from this thing that covers all the elements of this universe so that you know at least every element of the universe appears on at least one set in your collection all right so so let me actually make this a little bit more complicated and add one more set here so four five six four five six yeah yeah so now if I want to cover all the elements of my universe so it is that is to mean that I have to take every element of my universe or at least one of my sense then what I could do is I could start with just one two four I guess four five six and two three six so this is a cover of you okay this is a cover it's a cover in the sense that every element of U appears in at least one of these subsets that I have picked and the set cover problem is to minimize to find the cover of smallest size right you want to pick the smallest number of subsets among the substance that you have to cover the entire universe you want every element to be covered at least once and you want to cover the entire universe what's the smallest number of subsets you need to pick okay so this is the optimization version and of course again we go to the decision version we have some sort of budget b and the question is is there a cover of size B okay okay it makes sense yeah okay so that's a set cover problem so a very analogous but slightly different problem is the so-called set packing problem so in the set packing problem uh the situation slightly different here you're not trying to find um so let me change my example here again it's not suitable for this example so here you are not trying to find sets that cover the whole universe but rather you're trying to find lots of sets which are kind of disjoint from each other okay so let's again say that we have this thing and maybe this thing and this thing right so so I have the sets in this case one two four two five and three five six yeah so this is my collection then these two sets here the first and the last are disjoint from each other they don't share any elements yeah and now the question is how many subsets can I pick among the subsets I have that are all disjoint from each other okay and that's kind of the packing problem you want to pack as many disjoint subsets as possible from this collection okay so again you have a number k and the question is is there a packing of size k so you want to pick as many substances as you can which are Paradise disjoint they don't share any elements in common so it's a set cover problem it's a set packing problem and both of these show up in very very natural scenarios when you're trying to model various optimization problems and we're going to show that both of these problems are NP complete and in fact we will do it by showing that the first of the problems on the slide is NP complete okay so what's the first of the problems on the slide it's the exact cover by three sets so x3c right and what does this mean so this is sort of a special case of both of these problems together okay so in this setup again it's a set system we have a universe whose size is divisible by three right so I might have six elements in my universe or nine elements or 12 elements or something like that so I have a number of elements in my universe where the size is divisible by three okay and all the sets I get in my set system they all have size exactly three so I have a certain number of elements in my universe and I only get sets of size three so I can get this one I could get let's let's take this one again maybe I take this one yeah so I get sets like this it could also go kind of diagonally okay so you get a bunch of sets of size exactly three and the question in this case is do there exist yeah so you have a universe in this case of size six your collection of sets of size three so if you want to cover these this entire universe will as few sets as possible the least you could possibly hope for in this context is two sets right because these are sets of size three and you want to cover Universe of size six so the best that you could hope for is exactly two sets to cover the universe and the question is here is exactly that do there exist two sets that cover the universe okay does it exist two sets that cover the universe and in general this is the case when you have six elements in the universe in the in general if you had I don't know three n elements in this universe then this would be n yeah so let's assume that the size of the universe is three times n then this would be n instead okay so you have a collection of sets of size three and is there a collection of exactly the minimum possible number that you could hope for to cover the whole universe and that's what the exact cover by three sets problem is okay so you can see here that it's a special case with a set cover problem right because ah the only way so this is essentially asking for a cover of size n in this very special kind of set system so this is a special case of set cover right so it's almost immediate that the exact cover of three such problems sort of reduces to set cover because whatever set system you have here you essentially have the same set system on this side but the only thing is that you're asking for a budget of size n so you want to cover it with exactly n sets right and so the exact cover by three set problem is sort of a special case of the set cover problem so you have an immediate reduction from this problem to the other does it make sense kind of uh I'm saying yeah all right it's also easy to see that the exact cover by three such problem is a special case of the set packing problem because how is it that you could have exactly two of these sets that cover the universe the only way you could have two sets of size three that cover Universe of size 6 is if the two sets were all were disjoint from each other so the only possible solution to this would be a pair of sets are disjoint from each other for instance one two four and three five six so this it would have to be a solution like this right so such a solution is not just a cover it's also a packing so this is exactly what a packing is it's a collection of sets I always join from each other right so again this is the same thing as asking do they exist two sets that cover you it's the same thing as asking are there two disjoint subsets in my collection I'm asking that is there is the same thing as asking is there a packing of size two yeah so you can in general reduce exactly exact cover by three sets to set packing in exactly the the same way by saying that instead of asking for a cover of size N I could ask for a packing of size n and both of them are exactly the same thing just the way things are set up you have a universe of size three times n you have sets of is exactly three and you're looking for a cover of size exactly n that's the same thing as asking for a packing of size exactly n and so these are both equivalent things okay so the exact cover by thesis pump is kind of a special case of both these problems so it reduces to both of them fairly straightforwardly yeah and so what what we will show is that this problem exact Power by three sets is NP hard I should say that all these problems are in NP right if you give me a cover that can check that it's a cover of size at most whatever if you give me a packing I can check there's a packing etc etc so all these problems are in NP so what we've just shown is that this problem reduces to those others so if I show that this is NP hired then of course all of those are NP hard and this is going to be NP hired by reduction from tripartite matching so this reduces this guy so the reduction from tripartite matching to exact cover by three sides and again this is almost sort of by inspection right you just stare at it what's the difference between the exact cover of Threes by three sets problem and the tripartite matching problem right in both cases you have a universe you have a universe here you have a universe there you have sets of size three here and you have set to size three there you want to find a collection of disjoint subsets you know you want to assign different people's different snacks and drinks right if you don't want to share here right so you have this you want you're looking for disjoint subsets n of them to cover this you're looking for n disjoint subsets to cover that there right so word by word this seems to be exactly the same as that problem word for word except that in the tripartite matching case your universe is sort of special it's divided into these three parts and every set contains exactly one element per part ok so the tripartite matching problem is sort of again a special case of that problem over there where the universe is divided into these three parts and you have one part one element per part and so again uh this problem is a special case of the exact cover by three sets problem and so this reduces to this and what we're going to do in the next half of the lecture is that we are going to show that this problem is NP hard okay and that will sort of be the main thing that we do implying that all these other problems aren't be hard and hence NP complete any questions kind of or comments or anything at all to ask about these problems okay so if not so then let's I think this is a good time to take a break let's stop here and come back in 15 minutes or so where we look at the tripartite matching there we go all right let's get restarted so I now want to tell you why the tripartite matching problem is NP complete and um so I think along with the Hamilton path problem this is my uh one of my two favorite reductions from this course so it's really pretty so I hope I'll do some justice in describing it to you yeah so it's it's one of those things where um I can tell you the reduction it's very easy to verify but it takes a lot of creativity I think to come up with this reduction so let's see it so again the the high level outline is going to be similar to things we've seen already there's going to be a variable Gadget and a class Gadget and they're going to interact in some nice way let's start with the variable Gadget so what we're going to do is we're going to have yeah we're going to create some instance like this right we're going to have a bunch of points and then we're going to have a set collection of sets of size three each of them contain one from one point from each of these sets Okay but I'm not going to draw draw it like this because it's not so nice in general it'd be drawn out in a different geometric fashion you'll see so basic setups as follows we need to create a variable Gadget so let's imagine that we have some variable right let's say a variable X in the CNF formula so we have I should say that we are starting from three sat here so f is a three CNF formula and we are going to produce from here these uh these people snacks drinks and triples right with the with the condition that we want that there's a tripartite matching there exactly when this formula is satisfiable that's the condition we want and so now we're going to create these people snacks and drinks and triples for each of the variables okay so imagine that I have a variable X in my CNF formula and let's start with a very simple case let's look at the case where the variable X appears just once okay so then I'm going to we're going to create some sort structure like this so there's going to be two people and a snack and a drink okay and the way we're going to set it up is that the snack and this drink are very peculiar in the sense that they can only be consumed by these two people nobody else wants anything to do with these two objects okay so only these two people can eat the snack and drink so we are going to create two triples so there's going to be this triple which is that the first person likes this pair of snack and drink and then we're going to create another one down here okay yeah so so the overall setup is there going to be two of these triples like this that overlap okay so there's a p in this okay and so as I said this snack and this drink are very peculiarly suited to the tastes of these two people nobody else wants them which is to say that in a matching in a tripartite matching they have to be assigned to one of these two people right and that assignment we will think of setting this variable X to either 0 or to one right think of setting this to either 0 1 yeah and unfortunately I only have a black marker here but I will think of choosing the the green Edge think of choosing this green Edge as setting this variable to zero okay setting this variable to zero and the reason I think of this as setting this variable to zero is that I'm going to identify this vertex at the bottom here with the literal so let's call this variable X I'm going to identify this vertex at the bottom with the little X and I'm going to identify this vertex on the top with the literal not X okay and if I choose the edge on top that means not X is sort of satisfied they've got their snack and drink and X is free to do other stuff yes that's right but there isn't a rate unfortunately and I'm going to confuse myself this one this one on the desk this one okay very good all right okay you got me all right okay so now I just have to be careful because I'm colorblind so other than that everything's fine uh all right okay so we have a you you guys have tell me if I'm making a mistake so that's good oh wow okay yeah these are not great markers though okay let's let's see what we can do yeah so uh so again so we have the snack and the string and this P that was p and the P at the bottom is identified with the literal X the positive literal and the p on the top is identified with not X the negative literal right uh and so when I choose the edge on top the green Edge that sort of corresponds to already to satisfying the the person corresponding to not X yeah and the person corresponding to X is now free to eat other things and in particular to interact with the Clause gadgets that we'll construct later on so we will think of this as setting the variable X to 1 because the x is going to interact with the class Gadget and so that's that's the idea so so you have two ways of uh you know kind of um handling this variable Gadget you can either assign the snack and drink to the person on top or the person on the bottom and that corresponds to setting X to one or zero respectively all right so this is sort of the the simplest case where you have uh exactly um one occurrence of this variable okay but when we have many time when this variable occurs many times in the CNF formula we'll have to make one such thing