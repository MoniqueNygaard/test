everybody yeah all right so let's get started okay thank you I'm sorry I'm having some technical difficulties today morning let's hope things work out uh okay so um what we're going to talk about today is this topic of NP completeness but for said problems okay so um so last time we spoke about various problems related to graphs and we showed that things won't be complete and this time we'll talk about something slightly different is it just me or does it sound a little bit Yeah weird right okay so yeah so it's okay let me okay all right much better okay so we're going to talk about NP completeness of set problems so last time we looked at various problems related to graph Theory and we showed that things won't be complete and so I thought I'd start today with a short mentee quiz on some of the things that we saw the last time so let me just open up my presentation um I guess this is the first question yeah so so this first uh question is about a problem related to graph theory that we saw a couple of lectures ago it's about the independent set problem and how it relates to the vertex cover problem so it's kind of a good uh time to recall these definitions and see if you can make sense of this question so you have an independent set of size five then what can you say about the vertex cover thank you okay so so the number of answers seems to have stabilized somewhat so let's let's take a look at what you're saying here oh oops that's not what I wanted to do let me reveal this okay all right so there's some disagreement so so let's let's go through it again it's a good opportunity to discuss these Notions so uh if I have a graph right so this is like an abstract graph you have lots of vertices in the graph and independent set is a set of vertices so it's a set s such that there are no edges between two vertices here right so there are no such edges inside of this so that's an independent set and a Vertex cover is sort of has a slightly different property in the sense that the vertex cover has the property that every vertex every Edge has at least one end point in the vertex cover right so that's the property of a Vertex cover so you can have this and you can have this but again you cannot have this so then so that makes the complement of the set a Vertex count so so what we noted when we Define these Notions is that you have an independent set if you have an independent set s then its complement is a vertex cover and if you have a Vertex cover when its complement is an independent side so a sort of in close relationship to each other so if you have an independent set of size 5 its complement is of course a Vertex cover of size 5. because you have 10 vertices but the size of the smallest vertex cover is of course at most five so at most five is sort of what makes sense here right so yeah good so the so the plurality answer is correct here yeah but uh yeah so usually for vertex covers we're trying to find the smallest vertex cover so that's what's interesting you can always find a large vertex cover by taking all the vertices in the set that's always a Vertex cover so you want to find the smallest one and so in this case it's at most five right there could be something that's smaller okay so let's go on to our next question so this is also to do with graphs but um okay so you know that you can find the shortest path between two vertices in a graph in polynomial time using breadth first search for instance what can you say about finding the longest path between two vertices and a graph foreign thank you okay so let's let's take a look at what you're saying and be complete polynomial time solvable can't say okay good so uh again I think the majority has it right here so but uh but let's just clarify the problem here a little bit right so when when I say finding the longest path between two vertices and a graph that's really an optimization problem right you're trying to find a path which is a solution to an optimization solution I mean optimization problem but so we need to look at the decision version of this problem which is so you're given not just a graph so you're given a graph and maybe you're given two vertices in the graph let's call them SNT and you're given a number k and the question is is there a path of length k at least K between s and t so that's the decision version of this optimization problem and yeah so some of you have said that this problem is NP complete so what would you reduce from in order to show this promise and be complete yes hamiltonian path Hamilton path the problem we saw the last time so in the the Hamilton path the problem the value of K is a very specific K and what value of K is that so it's so the Hamilton path problem you want to know if there is a path of length of you know that passes through all the vertices in the graph so I guess if there are n vertices in this graph that would be a path of length n minus 1. so that's exactly the Hamilton path problem which we showed to be NP complete the last time and so this is like a more General problem so obviously this is at least as hard as this one and of course this problem is in NP because you could just give me a path of length length K and I would be able to check it's a passive length k so uh so that makes the problem and be complete and indeed that's what the majority of you have said so that's great all right so we saw this reduction uh for the Hamilton path problem last time and yeah how many of you can just recall it right off the bat yeah I wouldn't expect you to be able to it's sort of one of the more involved reductions that we we're going to see in this course and one of my two favorite reductions actually ah so it's really fun to understand and inside of that reduction we use this really cool uh Gadget that we call the xor gadget so the xor gadget was this thing so let me just recall it for you it's like this this then we had this okay so this was the XR Gadget how about that right yeah yeah okay so good uh so this xor gadget was constructed to have a very specific property okay and it's kind of good to recall roughly what that property was and I want to know if why such a complicated Gadget is required what if I instead use I don't know if you can see the little picture that I've created on the left here what if I use this gadget instead why would that not satisfy this property so just kind of discuss amongst yourself try to recall what property we needed of this gadget in the reduction so just sort of some very specific property and why can't we use this graph instead okay okay so I heard some sort of nice discussion uh going on so let's let's discuss so uh so just to recall uh the property that we used of this gadget here is that if you have a Hamilton pass in the graph that of course includes this gadget if the path enters this way then you know it it essentially has to follow this zigzag pattern and exit this way and if it enters this way then it of course follows the reverse exact pattern and exits from here and those are the only two ways of covering this gadget via Hamilton path and this is the property that was crucially used in the reduction and what about this gadget here the simpler looking Gadget so of course you could enter from the bottom left and exit from the bottom right you could also do the other thing but there are some problems with this so This somebody want to say I heard some sort of nice discussion people were drawing things in the air so yes back there yeah right that's right right yeah yeah so um okay so yeah what I said is exactly right but uh so so you're saying the reason this gadget doesn't work is that uh you can kind of cheat and do uh and cover the vertices of this graph in a different way you can go this way and then maybe this way and take two in and kind of visit all the vertices in this way and this is not what we intend right we want you to enter from one side and leave from the other side uh you also mentioned a different point where you said if I if I have four instead of three here I'm sorry if I have three instead of four in this gadget then I would enter here and exit from the top and I would enter from the left and exit from the bottom here and it turns out actually that's not really a problem so you can still make the reduction work with that property you just flip the roles of the two vertices on the right hand side but yeah this is a problem so you don't want to don't want this to happen right so this gadget doesn't work okay great so yeah so there's some thought and care that goes into uh creating these gadgets so they have Club specific properties to ensure that you can't cheat and do something that's not intended right you're trying to model the three side problem uh in some sort of graph theoretic way and you have to ensure that there's no cheating involved so the gadgets have to be carefully designed all right so that's great so that's kind of all I wanted to do in this initial part and so now let's uh talk about the business of the day let's go on to the uh the set the problems about sets Okay so so uh what do I mean about set problems so this is a wide variety of optimization problems where the input is what is called a set system yeah so so what's a set system so it's something very simple so it's easy to Define by picture so you you have a collection of items right right and this is typically called a universe U so you have a universal so let me put it in a box here and you can give these names maybe let me just call them one two three four five six and what you get is a collection of subsets of this universe okay so so you might have this universe too and then you might have some subsets of this universe for instance I might have one two and four that's one subset I might have two three and six that's another subset two and five it's a third subset so I have these subsets so one two four two three and six two and five Etc okay and I might have more yeah and just a universe and a collection of subsets of this universe that's what a set system is right so it's just a universal collection of subsets and that's the input to the problem so the input is this universe and the collection of these sets okay so this uh fancy F here denotes this set of sets uh subsets of the universe and that's what you're given as an instance of the problem and then you have to do various you have to solve various problems on this instance so various kinds of problems that we're going to look at so that's essentially a set problem and so you can represent this in binary in a binary encoding in some reasonable way right so you can think of this as a generalization of graphs for instance so in graphs you have a set of points but then you have edges the test involve two points at a time but now our edges can involve more than two points at a time so that's the only difference so again like you can encode graphs in adjacency matrices in other ways similarly you can encode set systems in all sorts of ways so we will just take some reasonable encoding of set system so for instance what you could do is you could tell me all the elements of the universe and then you could tell me all the elements in the first set then all the elements the second set all the elements the third set so on that's a reasonable encoding but any reasonable kind of encoding would okay so you're given a set system and now we're going to look at various computational problems to with such systems and in particular we're going to look at our favorite problem for the day is going to be this problem it's called the tripartite matching problem okay so so what's the setup here so in the tripartite matching problem your uh so your universe is divided into three parts so that's called let's say calling them P here s and D okay and so so we think of so the fun setup here is that you think of a situation where you're organizing some sort of party right and so you have n people attending the party so maybe P one through p n right and like a good host you want to give them food so you create a bunch of snacks S1 to SN and you create a bunch of drinks D1 to DN yeah so you're on a tight budget right so you have n people n snacks and N drinks so no waste yeah and unfortunately these people come along and they have their own preferences right so each person right so let's say person P1 likes to eat snack as one maybe pizza and beer okay but does not like for instance pizza and I don't know the second drink may be sold out something okay and then the second person has their own preferences so they might like pizza with soda but they might also like something else with soda if it is like soda okay and so you have a bunch of preferences of this form so you can think of this as a collection of sets of size three each right so it's going to be one person one snack and one drink per subset so the collection of triples right and that's your input okay so your input is this kind of set system it's uh your your Universe Divine to three parts and each set contains one from each of these three parts one element from each of these three parts okay and what's the AIM the aim is that no one goes hungry a Amazon one goes hungry so each person gets allocated a snack and a drink according to their preference and so in the end you kind of exhaust everything so you want a collection of disjoint triples that sort of covers all these elements together okay and that's the so-called tripartite matching problem so that's the problem so uh this makes sense I don't know so I just want to relate it to something you may have seen the so-called bipartite matching problem so the bipartite magic problem is a problem on graphs not on a general set systems so there your universe is divided to two parts your vertex set is you enter to purse U and B and you know you have maybe n vertices on each side and you put in edges between uh you know you know these vertices so it's a bipartite graph so edges go just between these two vertex heads so no edges on the on the insides and in that situation a matching is something where you can assign with you can look at a bunch of these edges which are disjoint and then cover all the vertices of the graph right so let me do a small example here let's just take a graph with three vertices on each side so maybe U1 U2 and u3 and V1 E2 and V3 and so matching would be maybe a subset like this yeah so three vertices like this right where you know so if you if you think of this as just people and snacks where each person is assigned a different snack that's it that's it right um so this is something that you may have seen I don't know in some other context I don't know if it has appeared before but at least it's closely related to the assignment problem for instance that did show up earlier in this course so it's closely related to some things that you have seen yeah and in particular this can be solved in polynomial time so this is polynomial time solvable so so the question here is is there a matching that contains all the vertices and this is polynomial time solvable okay using say linear programming or Max flows or many other ways this is but on the other hand if you look at the three-dimensional version of this which is what the tripartite matching problem is sort of the three-dimensional version of this uh problem this problem turns out to be NP complete okay and this is what we're going to see today this is going to kind of be the the main thing that we'll see in the second half of today's lecture okay so this problem turns out to be completed so again the situation is kind of analogous to a couple of things you've seen already two satis and polynomial time but three satis can be complete two coloring is in polynomial time and three coloring is in pre-complete and bipartite matching is in polynomial time but tripartite matching turns out to be complete okay so something some sort of phase transition that happens when you go from two to three in all these situations you go from Parliament I am solvable to MP complete okay so there's a statement
