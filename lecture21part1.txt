foreign all right uh morning so let's uh let's begin maybe um so uh today we're going to talk about well we're going to talk about this so we're going to talk about the NP completeness of more graph theoretic problems uh so last time uh we saw the first examples of some uh computation problems related to graphs they turned out to be NP complete and so those reductions the ones we saw last time I feel fairly natural and somewhat simple so this times this time we will look at some more problems that you've already seen before problems like the coloring problem and we will show that these problems are also NP complete uh this time the reductions will be slightly more involved and you will see interesting examples of how to model uh things like satisfiability in a graph theoretic context yeah so a lot of that's the main lesson to take home from this lecture okay so uh but before I start up let's kind of warm up with a few questions on 90 meter so I want you to pull up your phones or computers or whatever oh this is not the one I wanted all right say yeah so let's start with this question so it's a question about sat so this is a CNF formula which hopefully you're now fairly comfortable with and now the question is what can you say about the CNA formula so there are a few questions a question about the satisfiability of the CNF formula and also the not all equal satisfiability which is a concept that we introduced last time and this will play a crucial role in this lecture so it's a good opportunity to recall it thank you all right so the answers seem to have stabilized somewhat so let's look at what you've said okay wonderful so um so the majority of you have chosen the the right answer which is that it's satisfiable but not in a satisfiable but let's just quickly recall these Concepts right so what is a satisfiable CNF formula you want to be able to set these variables in a way that every Clause is satisfied so in this case I have three Clauses so the first variable by itself is a clause of width one then I have a clause of width two and a clause of width 3. the only way to satisfy the Clause of width one is to set X1 to true that satisfies the class of width one and then to satisfy the Clause of width 2 I have to set X2 to true and then to satisfy the Clause of width 3 I'm forced to set X3 to true but if I set all the variables to true then all the Clauses are satisfied satisfied so this formula is indeed satisfiable okay so there is a satisfying assignment so it's formula satisfied but uh what does it mean for a formula to be not all equal satisfiable n a e satisfiable so that's a stronger property so you want an assignment to the Boolean variables such that in every Clause you have at least one literal that's set to True right that's the standard satisfying Criterion but you also want that at least one literal is set to false which is sort of the opposite thing but that's what we ask for in this context and here the first Clause is width one so it's just got a single variable so there's no way that you can set some little to true and to false in that class okay so this when you have a clause of width one you this form a formula cannot be any satisfiable okay so this is not any satisfiable so it's satisfiable but not DNA satisfied great so that's indeed correct so any satis in some sense like a subset of sand right so if it's if a formula is in a sat then it's definitely satisfiable but the converse may not be true so this example shows that there are formulas that are satisfiable but not any satisfiable all right so now uh the second question sort of uh asks an abstract version of this kind of what happens to an abstract pair of languages that have this kind of relationship to each other so suppose now we have a couple of languages uh L1 and L2 where L1 is a subset of L2 right so then what can you say about the relative computational hardnesses of L1 and L2 what do you think could you say that L1 reduces to L2 2 reduces to L1 foreign okay so we have a few answers so let's see what you can what you're saying oh okay good so uh so we have some sort of um disagreement here and the majority of you think that L1 reduces to L2 and uh yeah I have to say that it's it's a reasonable answer because you know uh it seems like there are more things to do in deciding L2 if L1 is a subset of L2 but unfortunately it turns out to be not correct yeah yeah so the right answer is that you can't really say anything in the case that L1 is a sub Circle and the reason for it is the following it's fairly natural if you think about it right what does it mean to say that L1 reduces to L2 it means that L1 is at most as hard as L2 okay and you can easily come up with examples of languages L1 and L2 where L1 is a subset of L2 but L2 is much easier than L1 right for instance L2 could be everything right it could be everything could be a yes instance and that's a very very easy computational problem but that doesn't mean that it's harder than L1 right it's not harder than L1 for L1 being something so um so just because one language is a subset of another doesn't mean that it's easier than that language yeah and we can also go the other way it could be that L1 is a l one subset of l two and its it is much easier so it could happen that L2 reduces to L1 and L1 reduced to L2 but there are examples where neither of them hold okay and there are examples where L1 is exactly as hard as L2 and you've seen such an example with n a satin sat so any sat is a subset of sat right but they both reduce to each other because they both NP complete okay so all of these things can happen uh so this uh notation uh when we when we talk about reductions uh this this can be confusing in various ways so in case you found that this notation is what kind of LED you to this answer an incorrect answer here so that's another place to kind of correct your intuition this notation does not mean that if L1 is a subset of L2 then L1 reduces to L2 okay but it's a good kind of example to think about try to come up with examples where you know one language is a subset of the other but the first language is harder or the second language is harder Etc so these are good exercises to understand reductions okay so that I thought was a good warm-up so let's now go on to the to what we're going to look at today so again we're going to look at the NP completes of some nice graph theoretic problems and many of these problems you've seen already in this course so it's kind of going to be nice to see get some sort of closure on the fact there that we understand their computational status their NP complete okay so we're going to start like we did the last time with the reductions from sat okay so again we're going to use three sat in one of our reductions this time so given a CNF formula where every Clause is with that moves three check if there's a satisfying assignment to this formula so that's the three sat problem that's kind of our main go to NP complete problem but for some of these reductions it will be more useful to look at Nae sat right so in not all equals sat which is sort of nicer in some context for reductions to certain problems so in the first couple of reductions that we're going to see today we're going to use Nae sat and then we're going to come back to three satency reductions from three set all right so these are the problems that we're going to look at so the last time we saw three very natural problems to do with graphs the independent set the click and the vertex cover problems yeah they may have been new to you but they're reasonably natural and kind of they show up all the time in applications so they're worth knowing this time we're going to see three problems which possibly are reasonably familiar to you uh the three coloring problem which you've seen which was our first example of a prominent P the tsp problem which of course you know quite a bit about and the max cut problem which is kind of an optimization version of two coloring so I'll describe it when we get to it so uh so let's start with three coloring okay so we're going to show now the three color range is NP complete so just to recall what's the three coloring problem so we have a graph so let me just draw an example of a graph here so let's say let's take this example okay so so you have a graph on four vertices so let's say a b c and T okay and what you want to do is you want to color the vertices of this graph with three colors and we can call these colors whatever we want so sometimes we call them red blue and green but for today we'll call them 0 1 and 2 okay and it will be nice to think about it this way because assignments to Boolean variables are zeros and ones and this is sort of zero one and two so it'll be a nice relationship there so we think of the colors as 0 1 and 2 and we want to assign these vertices these colors so that adjacent vertices always get different colors right so Json vertices always get different colors so how do I do that so in this graph I can do it there is a three coloring and if you think about it uh the three coloring must give different colors to these vertices a b and d here because they're all connected to each other so they must get different colors so let's give them different colors maybe 0 1 and 2. and then we're left with c and we cannot give it the color one or two so we must give it the color zero again so this is a valid three coloring of this graph and in general we want to know if the graph has a valid three coloring like this and so now we're going to produce this reduction so what the reduction is going to do is that it's going to start with an instance of any well AC and a formula it doesn't know whether it's in n a SAT or not but it's going to produce from this formula a graph like this right it's going to produce a graph like this and the graph must be three colorable exactly when the formula is n a e satisfiable not all equal satisfiable so let's start with the formula so let's say it has n variables and M classes and now we're going to produce a graph on a certain number of vertices and a certain number of edges strong will be too many not many more than n and M which has this property that is three colorable exactly when the formula is in a satisfied okay so just a kind of a small high level remark so why do we start with Nae sat in this situation and not sand yeah so somehow we're going to think we now we're going to create this graph and they're going to be vertices corresponding to the variables of this graph yeah in fact to the literal sorry corresponding to the variables of this formula now the literals of this formula and we're going to think of coloring the literal 0 or 1 as corresponding to setting the variables to 0 or 1 in the original formula and now if you think about it when it comes to coloring there is no difference between the color 0 and the color one right they're just two different colors it's just names that we gave to two colors there could be red blue zero one Whatever right they're just two different colors but in satisfiability it really matters there's a difference between 0 and 1 because sort of zero is false and one is true and in satisfiability what you want is that in every Clause there's at least one literal set to true so there's a kind of a difference between 0 and 1 in that situation yeah but this difference goes away when we look at n a e sat because in n a e sat what we want is that in every class is at least one literal that's set to true and one literal that's set to false ok so in some sense it's it's a version of sat that treats zero and one sort of in a more symmetric way and this is why it's useful for starting a reduction to three coloring because in three coloring also the colors are all symmetric that we don't differentiate between different colors sort of the high level picture I mean it's not uh super crucial to understanding the reduction but that's why we start with Nae sat and not sat in order to do this reduction all right so how we're going to do the reduction right so uh again the idea is uh very simple so we're going to model uh we're going to think of assigning literals or variables in the formula to zeros and ones ask and we're going to model that as coloring the vertices of the graph with colors 0 or 1. okay so how are we going to do it so let's start let's do it on a small example so the which is probably going to illustrate the entire thing so let's start with some example maybe X1 or not X2 or X3 and not X1 or X2 are let's let's do maybe let me do not X1 or X2 or X3 okay so let me do this um yeah okay fine so and and you could have of course more Clauses of this one right you could have more classes yeah and so now what we're going to do is we're going to create something corresponding to the uh literals of this we're going to create vertices corresponding to the literals of this formula and somehow coloring the vertices 0 or 1 should correspond to setting the literals to 0 or 1. okay so that that idea is fairly simple so so we have we create a Vertex corresponding to X1 and a Vertex can find not X One a Vertex corresponding to X2 a Vertex corresponder not x two a Vertex corresponding to x three not x three and so on if there are more variables you create vertices custom at each of those okay so these are the vertices in the graph that we're creating and so now what I want is that I want to think of colorings to these vertices as truth assignments to the liters here right and of course when I look at truth assignments to literals here I do not want X2 and not x 2 to get the same truth assignment I want them to get opposite truth assignments and the way I can enforce that on the graph theoretic side is to put edges between them okay and these edges ensure that the colors assigned to x one and not X One are different which corresponds to the truth assignments to the literals being different so that's step one but step two of course we have three colors in the graph but we have only two Boolean assignments to the literals so somehow we must not allow the color 2 to appear on any of these vertices okay and the way we're going to enforce that is that we're going to create one vertex up here okay and whatever color this vertex gets I'm going to call that color too okay so no matter what color that vertex gets that's the color too and I connect all of these vertices okay and so now what I see is that every variable X1 so the variable X1 for instance has two choices it can be color zero or one and depending on what it's colored not x one gets the opposite color and the same for X2 and X3 exactly what happens in the CNF formula so what we've done here is that we've modeled the process of setting Boolean variables to zero or one to coloring vertices in that graph over there okay and when whenever we do this kind of modeling yeah this we have to create some sort of construction that models the problem that we we're reducing from in the problem that we are reducing to whenever we do this kind of construction this kind of thing is called a gadget okay and in this case this is a variable Gadget because what we are doing is we're modeling the Boolean variables of the SAT formula okay so the variable Gadget okay so that's the first part of the reduction the second part is to actually ensure that the valid colorings correspond to any satisfying assignments right that's why we are here we want to check uh we want to reduce any sat to three coloring so the rest of it is a class Gadget yeah for there's going to be one for every clause yeah and that's going to ensure that when I have any satisfying assignment over here that kind of corresponds so when I have a service when I have some sort of assignment over here so maybe X1 is set to 0 and X3 is set to 1 and X2 is set to maybe 0. so X2 is set to zero so the central is set to 1. so when I when I have an N A satisfying assignment like this one it should you should be able to color the vertices accordingly and then extend that coloring to the rest of the vertices of the graph which I'm going to do now yeah I'm going to define the restograph now but you should be able to extend in any satisfying assignment to the curving of the whole graph on the other hand if you didn't have any satisfying assignment there should be no way to color the rest of the graph that I'm going to draw okay and that's how the aristotograph is going to be drawn so what's the rest of the graph well what we are going to do is we're going to draw what I'll call Clause gadgets so we're going to model Clauses now the rest of the graph okay so there's going to be one for every Clause so let's look at the first Clause here so what I'm going to do is I'm going to draw some sort of graph such that when I have an any satisfying assignment like this one so I have this I have one here and one here oh sorry one here so when I have an any satisfying assignment to these three vertices which are the literals of my Clause somehow you should be able to give a valid three coloring to the rest of to the graph that I'm going to drop down here okay and if it's not in any satisfying assignment if there were all zeros or all ones then there should be no way of doing this and once you decide that this is what you want to do it takes a little while to now come up with a graph with the suitable properties okay you decide that this is your strategy and then it takes a little bit to kind of work and creativity maybe to come for this graph but once I give you this graph it will be easy to verify that this graph has the required properties okay so what is this graph so it's fairly simple it's just a triangle okay and the three vertices the triangle correspond to the three literals of the class so maybe this one corresponds to X1 this one corresponds to not X2 and this one corresponds to X3 okay and we connect them all with each other yeah so I don't want you to uh think that this vertex is the same as this one it's a different one it's just that this vertex of this Clause kind of corresponds to this variable up here it's a different vertex yeah it's the same for the other two so there are different vertices yeah and now how we're going to how this cross catch is going to interact with the variable Gadget is that we're just going to connect up the corresponding things okay and we're going to do the same thing with the second thing not x one x three all right so that's the overall picture of the reduction it could be more Clauses so you add more such gadgets and so on okay so now what's the idea behind this right so the idea behind this is like we said before if you have a not all equal satisfying assignment to this Clause like the one you have here then it should be possible to color the vertices of this graph or this of this triangle in a way that's a valid three coloring okay let's see why we can do this right so it's a triangle down here so these three vertices must all get
