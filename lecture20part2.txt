Clauses so let's say X1 or not x two or X3 so these Clauses have width at most three that's the three and maybe x 2 or not x three and X1 maybe let me put in not x one or X4 why not ok so something like this you have a collection of Clauses like this it could be more of course yeah so let's say you have a formula with n variables and M clauses and now you want to produce a graph okay so now you have to start this formula and produce a graph and a number k so what's the idea behind this reduction well the idea is quite simple so you can think of the process of finding a satisfying assignment to this 3C in a formula as the process of choosing a literal in each Clause to satisfy right I might choose to satisfy this Clause by setting this to 1. I might choose to satisfy this Clause by setting this to one if I choose to satisfy this class by setting this to one and so on so I can I'm going to choose one literal at least one literal in each class to satisfy but I have to do this in sort of a consistent way right I cannot satisfy this Clause with X2 and this Clause with X2 because this forces me to set X2 to 0 and this force of me to set X2 to 1. so I have to do it in a sort of consistent way and so now we're going to model this problem as choosing an independent set in this graph which is like the process of choosing a bunch of vertices that are not connected to each other and this connection property is going to enforce this consistency property here that we have between literals so let's do it so the the problem is actually it's going to be the reduction is going to be quite simple so what we are going to do is we're going to introduce vertices for all the literals in the different Clauses here ok so first Clause has three literals so I do not have to draw it in a circle so let me just draw them separately so let's say I introduce three vertices here let's call them U one one U one two and u 1 3. the second Clause has two literals so let me make those U two one and U two two and the third Clause has three literals so let's say u31 u32 and U three three okay this way you say to three three OK and so on so they're going to be a bunch of these Clauses we're going to have lots of vertices okay and again the process of choosing a satisfying assignment should be to choose one literal from each Clause so we can satisfy them all OK and so we want again the process of choosing independent sets in this graph to be choosing one from each of these sets of vertices that we just created for each class okay so we want to ensure that the independent sets have only one per vertex per set of vertices okay so what we are going to do is we're going to connect all pairs of things here so I'm going to connect this one I'm going to connect this one I'm going to connect these three here and so on okay so for every Clause we introduce one or two or three vertices but then we connect them all with each other and this ensures that the independent set can pick at most one percent right you cannot pick two of them okay that's corresponds to picking one literal per Clause okay but now I have to enforce this consistency condition I cannot have it to be the case that I pick not x 2 from this clause and x 2 from this Clause OK and we're going to enforce that by putting the putting an edge between the corresponding vertices and the different Clauses right so for instance uh u12 corresponds to not x two in the first clause and U2 1 corresponds to x 2 in the second clause and these two are inconsistent with each other so I'll put this here and similarly I have an X3 here and a not x three here so that corresponds to U one three in the first clause and U2 2 in the second Clause so I put this edge here uh and I have an x one over there and a not x one over here so that forces me to connect U one one and the first Clause to U three one in the second in the third clause what's up okay and this just enforces that you cannot pick X1 to satisfy the first clause and not x one to satisfy the third class so just to kind of maybe make a certain point so I could have had an X3 in the third clause right instead of an X4 so then this would correspond to X3 but this x three this X3 is consistent with this X3 right they are the same polarity so to speak so these two are consistent with each other so I do not connect those right I only connect literals which are inconsistent with each other so I cannot satisfy both of them at the same time so if the independent set is allowed to pick x 3 in this clause and X3 and this Clause to satisfy both Clauses that's fine all right okay so that's the reduction yeah so you just create a bunch of vertices one for every Clause yes oh good one yes thank you I should do that I should connect this u33 to U2 too you're absolutely right thanks sorry it's u32 is it yes you're right yeah this is what happens to changing your example on the fly all right okay good yeah uh so that's yeah so that's the whole graph yeah and uh so that's it so so we created this graph and clearly this graph can be constructed in polynomial time right you just have to do a small modifications to your formula and the observation is that so let me write it on this side here and the observation is that f is satisfiable if and only if the graph G has an independent set of size however many Clauses you have there right so it's going to be an independent set of size M because the M classes okay yeah and the proof of this should be reasonably clear from what we've done already but let me just sort of go through it so if you have a satisfying assignment here x one through X N is a satisfying assignment right then what you could do is you have a satisfying assignment so the satisfying assignment picks satisfies at least one literal from each clause right and it can never satisfy one of the Clauses with x i and another Clause but not x i right so this set of literals is sort of consistent and this will give you an independent side right so this is uh so I'll say ah independent set of size m by picking A Satisfied literal in each clause okay so that's how you get an independent set of size M if you give me a satisfying assignment I can find an independent set by going to the graph and just picking the satisfied the vertices corresponder satisfied literals in each clause one of them of course conversely if you have an independent set of size m then the independent set can contain at most one vertex per Clause right because we we kind of connected all the vertices in every Clause with each other so we cannot connect take two of these so we must take one from this set one from this set one from this set and so on that's how we can construct an independent set of size m and then of course those give you a collection of literals this collection of literature is going to be consistent because it's an independent set so you couldn't have chosen x one and one and not x one the other it's going to be consistent so you set the variables according to the literals that you picked right so for instance this independent set will give you a set of literals it may give you a literal X1 in one place X2 is some errors maybe not X2 somewhere else X3 somewhere else etcetera etcetera so now you get a satisfying assignment you set x one to one X2 to 0 x 3 to 1 right maybe the the literal X4 never appears so then you could set X4 to 0 or 1 it doesn't really matter and so on and this gives you a satisfying assignment to the original formula okay so an independent set goes to a satisfying assignment satisfying assignment comes down Independence right so we've shown both sides the reduction so indeed there's a valid reduction and shows that sat reduces to Independence okay cool so that shows that independent set is NP hard we showed it's an NP so it can be complete it depends at reduced to click and vertex cover they are NP hard they're all in NP and be complete okay so that's it so that's sort of the main thing that I wanted to do today uh got a what 10 minutes or so remaining so I thought I would start with uh kind of a variant of sat that we will use some for some more NP complete problems the next time okay so uh and I'm going to solve just end with that it's going to be a short reduction hopefully um so we have seen already that uh the variance of uh that three site is sort of useful in reduction to NP complete problems uh to graph theoretic problems for instance here so it's kind of useful to have variants of sat there are NP complete okay so for some of the problems we're going to see the next time which again have to do with graphs it will be very useful to have a variant of sat that also may not be complete and this kind of a weird variant of sat it's called not all equal set not all equal sign so let me try to illustrate this ah problem with an example ok so let us take an example of a two CNF formula so let us take x one or X2 and not x one or X2 and X1 or not X2 so this is a simple two CNF formula and uh so this is satisfiable right so because what you could do is you could set X1 to 1 and X2 to 1 and that would send this one next two to put one so all the classes satisfied because every Clause has a positive letter satisfied later okay so we will call so these are satisfying assignments so we will call an a an assignment not all equal satisfying if it satisfies a stronger property than this one so in a normal satisfying assignment we have at least one literal in every Clause that set to true but now we will require that at least one liter in every Clause is set to true and that at least one liter in every Clause is set to false ok so it is not all equal so so this is a satisfying assignment but it's not a not all equal satisfying assignment because this clause all of its literals are set to true and we will disallow this okay so this is not a not all equal satisfying assignment and indeed you can in fact see if you think about it for a while this is the only way to satisfy this simple formula and therefore there is no not all equal satisfying assignment so not all equal satisfying assignments a special kind of satisfying assignment where every Clause is at least one little set to true and one literal set to false at least one of each so this is the only way to satisfy the Clause since clearly not a not all equal satisfying assignment so this one is actually not not all equal satisfiable n a satisfiable for short ok on the other hand if I throw away this clause which is kind of a problem Clause if I throw away this one then this is a not all equal satisfying assignment for this simpler formula okay because uh of course uh this literally is set to 0 here and this letter is set to 0 here so that's uh and N A satisfying a sign so this one is n a satisfiable you can also come up with another any satisfying assignment here by just flipping the variables so you can just set X2 to 0 and X1 to 0. and that automatically turns 0 this 0 to a one and that's 0 also to a one and that's again an N A satisfying assignment okay right because again now every literal has at least every class has at least one little set to true and one literal set of phones and this is true in general so any any satisfying assignment for a CNF formula if you flip all the variables you get another in a satisfying assignment for the same formula because every Clause had at least one literal set to true and this literal is now set to false and it every clause or at least one literal set to false and now you flip it that's it was Now set to True okay so any satisfying assignments are nice in the sense that they come in pairs yeah you can always take any service NSM and flip everything with another okay so that's the problem I mean that's the notion and so the associated problem of course is you're given a CNF formula and is it n a satisfiable is it satisfiable in the stronger sense is it satisfiable in this in any sense okay and this problem uh just like the sad problem also turns out to be NP complete this problem turns out to be incomplete and this is a great starting point for many reductions so I just want to kind of quickly justify that and then we will stop there and the justification for this is reasonably short and it goes back to this reduction from circuit side to sat that we've seen now I know a few times and that hopefully you've also been looking at because of your hand in um so let's just quickly look at that and then see how to get a reduction to an a side okay so what was that reduction so we started with this notion of circuits hat which we know to be NP hard so let me just recall that so you have a circuit like this maybe I don't know some circuit like this right and so you want to know if it's satisfiable you want to know if there's an assignment or variables that makes a circuit output one and so now we knew we know how to kind of convert this so this let's call this circuit C on the three variables X One X two x three we know how to convert this to a CNF a formula while preserving satisfiability right we have a reduction from this to CNF sat so the reduction transforms this into a C and F Formula in fact it's a 3cnf formula we noted this last time the set of variables in this formula are the variables of the original circuit and then new variables that sort of correspond to the gates of this circuit okay so you have the three variables X One X two x three but you add three new variables let's call them y one y two y three that correspond to the gates of this circuit yeah and so now uh this formula sort of looks like it it adds these constraints on these very variables sort of saying that the value to Y2 for instance respects the functionality of this circuit so you have constraints that say things like Y2 is y1 and X2 and we write this as a three CNF formula because there is some Boolean constraint Boolean function on three variables and we said any Boolean function on three variables can be written as a three CNF formula and this was uh this is how we construct a CNF formula okay so so far I haven't really ever written down what the 3cnf formula is at least I haven't discussed it but now we will actually look at it because it will be useful in the reduction to nasat and we'll see that there's almost a reduction to any side yeah we just have to do a small change and then we'll get a reduction today so let's see how to write this so it's it's a similar thing for the or gate and the not gate but let me just do the and gate for instance it's all the same ok so here's a way to reduce it okay so if I want to write this a 3C in a formula there are many ways to do it but we'll take a kind of a clever route that is given by this reduction so what I am going to do is I'm going to say that this is the same thing as saying that if Y 2 is 1 then y1 is 1. if Y2 is 1 then X2 is 1 right that's what and gate is and and gate is sort of one exactly when its inputs are one so if the output of the and gate is one then the inputs must be one and if both the inputs are 1 then the output is one okay so that's that's what an and gate does it's exactly one when the inputs are both one so this is these are a bunch of implications but we can write these implications as clauses okay and if you do that you get the representation up there which let me just rewrite it here so it is going to be not Y2 or y1 and not Y2 X2 and not y1 or not x two all right okay so that's that's just the three CNF representation of this thing in a specific way there are multiple such representations but I've just chosen this one because easy to work with for what we're going to do so so I want to claim that this is almost an NAE satisfied and an instance of n a is that not all equal set and the reason for it is the following so suppose I take a satisfying assignment to F right suppose it is a satisfying assignment to F so it's going to be a satisfying assignment to this constraint it's got to satisfy this constraint what does that mean right it means that Y2 must be set to y1 and X2 so Y2 must be set to whatever y the and of i1 and X2 yeah and so what are the possible settings for that well y1 and X2 could have been anything and Y2 would be the conjunction of those things which would be 0 0 0 and 1 in this case okay and so now what does that correspond to I claim that it's almost like in any satisfying assignment which is just slightly modified let's look at what happens to this Clause here and any of these settings okay under the first setting y1 and X2 are both set to zero so this these Littles are set one but y two is set to 0. yeah and the second second setting you can similarly check that this is one this is zero this is zero and then you have 0 1 and 0. and finally you have 0 0 and 1. so when you look at any satisfying assignment to this Boolean constraint it is already n a satisfying it's not just a satisfying assignment it's an N A satisfying assignment to this Clause here right it's not the case that all the variables in the all the letters in the Clause is set to true in fact at least one literature is set to false okay it's almost any satisfying assignment unfortunately uh this is not true for these other Clauses okay these Clauses of length two this turns out not to be the case so for instance if I look at the first Clause here not y two or Y one yeah I have this assignment which sets both of these literals to one so every satisfying assignment to these three variables is going to be not all equal satisfying for the Clause of length three Clause of width 3. but not not all equal satisfying that's hard to say not not all equal satisfying for the class of width two okay so sometimes that that thing goes wrong so we're going to fix this so it's almost a reduction to any sat in the sense that Clauses are width 3 are in a satisfiable that's fine but closer with two or less are not necessarily in a satisfiable because the only way to satisfy them might be to set in this case y two to zero and Y one to one that forces the cause of bit two to be all the literals to be set to one OK and we fix this a very very simple way which is that we're just going to add a new variable one variable to all of these Clauses together okay we're just going to add one new Global variable let's call it Z and we'll add it to all the Clauses every clause in the whole construction gets the same variable Z added to its Clauses of width at most two right because loss of width three are not a problem you add a single variable Z to all clauses of width two or less okay and so now the Z is completely up to me so I'll just set Z to zero and that will ensure that it's an N A satisfying assignment yeah because we already know it's a satisfying assignment what we started with so some of the other literals are set to one so one is not a problem but the problem may be that all the letters are set to one but we set the variable Z to zero and then we get an A satisfying a second okay so now we get from here a new Formula F Prime on the same set of variables but now okay the same set of variables plus one more Z all right and that variable Z appears in all clauses or with at most two in the original graph I mean the original formula which means they become a little bit longer but they're still a width at most three yeah and that's it so we just showed that when you have a satisfying assignment to this one you can plug Z equals 0 and get an N A satisfying assignment this one and if you start with any satisfying assignment to this one yeah you can first negate all the variables to ensure that Z is 0 that's still an N A satisfying assignment and then you can kind of come back to get an any satisfying assignment okay so if you start with any satisfying assignment here first make Z equals 0 and that will ensure that Z doesn't really matter and the rest of it is just a normal satisfying assignment yeah so that essentially shows that circuit set reduces to any sat circuit size is MP hard and a side is NP hard n a's had obviously an NP you give me an assignment I can check if there any satisfying assignments so any side is NP complete okay so kind of rocketed through that faster than I expected actually uh are there any questions comments okay all right okay then thanks thanks a lot stop here have a great
