equals 0 to be on the right side so let me just also do that here let me just to be consistent with what I have up there let me fix this so maybe X1 equals 0 is on the right side and X1 equals 1 is on the left side and I have I guess this is X1 and this is X2 and this is not X3 okay so that's that's what my picture indicates so let me just do that okay and so now what we're going to do is we're going to put a copy of the class Gadget between this virtual path and this virtual path okay yeah and the same thing between X2 this virtual uh age and the switch challenge okay so what does that mean right so let me draw one part of the graph for you and you will see that it's it kind of gets a little bit hairy okay so let me draw for instance how to connect this this virtual Edge and this virtual Edge down here so I just essentially have to put a copy of this thing here so I put four vertices one two three four and I put four vertices here one two three four and I connect them up one two three four okay yeah and I don't even know if it's visible at the back but basically what we are doing is we are connecting up this virtual Edge in this virtual Edge sort of using to sketch it okay so this is one of the virtual edges this is another virtual Edge if you just connect them up this way okay so what's the point of doing this yeah well the point of doing it is the following is that when we do when we are going through a hamiltonian path right and we decide maybe to set x x 2 to 1 so we come down this virtual Edge right we're going to enter this gadget here and when we enter this gadget here we can kind of walk we can do this zigzag pattern to take care of all visit all these vertices in this gadget right so we're going to enter the gadget here we're going to do a zigzag pattern to visit all these vertices and if you have a satisfying assignment in every Clause there's going to be at least one of these virtual edges which we are going to kind of Traverse as we go down this satisfying assignment right so for this Clause we took care of X2 for the next Clause maybe we set uh oh we we have X2 again so so uh for the next Clause again X2 is also going to be connected to the next Clause so let me also draw that here so so again maybe this is X2 not X1 and X3 so again this part is going to be connected up to the same virtual Edge right so again they're going to be four more such vertices they're going to be connected to that virtual Edge again using this complicated instruction and so what we're going to do as we go through the virtual age corresponding to X2 equals one is that we're going to visit all these vertices and since we have a satisfying assignment if you have a satisfying assignment in this case setting X2 to 1 already gives us a satisfying assignment what we can do is that in every Clause we take care of one of its virtual edges this way okay by going through the satisfying assignment we sort of take care of visit all the uh these internal vertices of one of its virtual edges this way okay and so what we are left with now is just two of the edges of the clause which are not visited maybe two or maybe even less and then we do that in a separate way okay and that's going to take care of the whole thing okay so so the way we set up the Clause Gadget initially was this triangle right and I said that this triangle by itself yeah you have these internal vertices inside the triangle and there is no way to Traverse this via Hamilton path and there's no way to Traverse this via Hamilton path just this way because if you just go like this then you get into a loop and you visit the same vertex twice yeah and the way we kind of get around that is by first picking a satisfying assignment and a satisfying assignment visits some of these vertices it takes care of some of them yeah and when you take care of some of them you don't have to visit them again you can sort of pretend that they don't exist and what you're left with is exactly the rest and you can go through all the other vertices in a Hamilton path and that's what gives you a Hamilton path in the whole graph okay so it's still kind of high level but I hope it's getting more concrete is there any kind of questions or comments or okay so this is what we do so this is how we connect up the class Gadget and the variable Gadget and there's something slightly different that you need for class of width2 right for Clause of width 2 you won't have a triangle but again you'll just have two parallel virtual edges that you'll connect up to the respective uh variable gadgets all right so that's uh that's the whole thing so now let's let's try to build up to like a formal argument so now suppose that I have this formula whatever it is right and I have a satisfying assignment X1 and I want to now say that this graph has a Hamilton path so what would the Hamilton path be right the Hamilton path so the Hamilton path starts at the top yeah and then it make the it makes the choices in the variable gadgets corresponding to a satisfying assignment so the satisfying assignment sets X1 to 0 x 2 to 1 x 3 to 0 etcetera it makes the the analogous choices here yeah so here so visit the vertices in the variable Gadget yeah so according to the satisfying assignment so you visit the vertices in the variable guys according to satisfying side so if I set x one to one or X1 to 0 so then I go down here if I set x 2 to 1 I come here and of course when I come here I Traverse all these vertices yeah you take care of all the xor gadget vertices that you see along the way you have to do that this is the only time you're going to get to do it so you kind of do a zigzag pattern and kind of do that and then come down here set x three to zero come on here okay so after having done all this work you're going to be at this shaded vertex okay now which are the things you haven't yet visiting you haven't yet visited so for instance if you're already satisfied this literal you you visited all these vertices but you haven't yet visited these vertices you haven't yet visited these shaded vertices and you haven't yet visited these vertices yeah so you haven't visited sort of the vertices in the xor gadgets corresponding to literals that you didn't satisfy and you haven't yet visited all these shaded vertices that we have yeah and so now we have to add more edges to this graph in order to ensure that the uh uh that you can visit all these other vertices and the way we do that is that we just connect all the Shaded vertices to each other okay so between every pair of shaded vertices vertices there's an edge so there's already an edge between some of them but I'm going to add more edges like this this way and this way etcetera yeah so shaded vertices are going to be connected to each other they form what we call a clique the last time yeah so you form a click they're all connected to each other okay so once you get to this shaded vertex Now you kind of have to you are you have to cover you have to visit all the other Shadow vertices so you jump to the ones in the first class so you jump to this one maybe yeah and you can because you're kind of connected up there so you just jump up there okay and once you're up here you have to visit all the internal vertices of the xor gadgets that you haven't yet satisfied so now you take care of all the vertices in the xor gadget here so you kind of go through all of them again it's the zigzag pattern you take care of all these vertices you come up here you take care of all these vertices you come up here yeah and this is the final step we don't have to take care of these because we've already satisfied these so we don't have to take care of this final Edge so from here we can just directly skip over to the next class Gadget okay and this is where we use the fact that it's a satisfying assignment yeah because it's a satisfying assignment in every Clause there's at least one of its virtual edges that we've already visited so we don't have to visit all of them again we have to visit two or one or sometimes even none okay so we visit all the virtual edges that we need to as we travel to the Shaded vertices of the class and then we skip to the next Clause visit each shaded vertices and the next Clause visit each shaded vertices and so on until we visited all the Shaded vertices and we are down here and then we just go here and that's the Hamilton path okay so that's kind of a real mouthful so let me just say it again so visit vertices in the variable Gadget and then visit clauses and Traverse all unsatisfied X yeah let's say all unsatisfied xor gadgets by which I mean the xor the vertices in the xor gadgets correspond to the unsatisfied electrons okay so you go through all of them in the end you end up at that shaded vertex at the bottom and then you end up at the final vertex of degree one okay yeah so that's the Hamilton path so it's it's uh you could see it's quite a yeah it's it's a real uh non-trivial reduction it's a very creative kind of thing to come up with this reduction the definition of the xor gadgets are the how you model uh setting a variable to two values how you model the fact that you have a satisfying assignment so you do everything here so this reduction really has it all it's very interesting okay so any questions about this reduction Okay so you should also prove the other direction right if you have a Hamilton pass in this graph how you're going to extract a satisfying assignment but that's sort of exactly reversing the argument we did right if you look at the Hamilton path it has to pick one side for each of the variables X1 through xn so you kind of extract the values for X1 through x n from that Hamilton path and then it's a satisfying assignment because it has to take care of at least one of the virtual edges in each class because you can't do it later you can't take care of all the virtual edges in the Clause after you've reached here so you must have taken care of at least one in every class on the way down okay and that's sort of why it's a satisfaction so if you have yeah so if you have a hamiltonian path here then you get a satisfying assignment X1 to x n by uh looking at the choice is choices in the variable Gadget and you can argue that it is a satisfying assignment by saying that in every Clause at least one of the virtual edges must already have been traversed before we get to the first shaded vertex down here okay so that was uh that that's quite a quite a reduction right and but as a result of that so it's it's it was quite a bit of work but now we are at a stage when we can show that tsp is NP complete without much more work so let's go ahead and do that and that will be the end of this lecture so we've just shown that the hamiltonian path is MP3 and what we are going to show in order to show the tsps and be complete we're going to just reduce hamiltonian path to tsp okay that's going to be the final reduction so let's do it okay so here we go so it's uh so the final uh kind of uh reduction of the day is the reduction from Hamilton path to tsp to tsp yeah and this reduction is going to be very simple not at all like the reduction that we just saw okay so what's the Hamilton path problem so again we have this graph and we want to know if it has a Hamilton path or not so it's just a an instance this problem is just a graph okay and what's an instance of tsp right in tsp what we have is we have a bunch of cities and we have distances between these cities right so the instance of tsp is this bunch of distances so we'll call it the distance Matrix okay so it's going to be like an N by n Matrix if you have n cities so that's the The Matrix of distances between the cities so that's the instance and since it's an optimization problem we also have some sort of Target value or budget b and what we want to know is is there a tsp tour of all these cities yeah with the total length Atmos B so that sort of uh the main goal of the tsp problem so that's the decision version okay so how are we going to turn this graph into a bunch of distances so there's a different the difference between the Hamilton path and tsp again right so you have a path not a cycle so that's a relatively minor difference but here you also have the things that there are edges in this graph and you can only go from one vertex to another via an edge right whereas in the tsp instance in principle you could go from any City to any other City but of course the the length of your tour will sort of depend on the distance between these cities so you could go from any City to any other one but the distance could be more or less right so we're going to model the fact that you have edges between certain vertices in this graph by distances between these cities so how should we do it well maybe I shouldn't have erased my example so let me try it again yeah so what we're going to do is we're going to keep the the number of cities the same the number of cities to be the same as the number of vertices here okay and so what we're going to now say that the distance between a pair of cities so I and J so inj could be any among a b c d e f so I and J is going to be 1 if the spare is an edge and two if the spare is not an edge okay so we're going to keep the same set the vertices in the graph the cities are going to correspond to the vertices on this graph and the distances are going to correspond to whether there's an edge or not so these distances are all going to be one right whereas these distances yeah any pair of vertices that are not connected these distances are all going to be two okay so things that are not connected at a distance to things that are connected at a distance one yeah so that's the distance Matrix that we create yeah does it make sense and it's kind of makes sense right because we are trying to penalize the tsp tour every time it takes and something that's not an edge in the graph so we make the distances between these vertices slightly more it turns out we just need to make it a little bit more like two or something and that works okay so let's do the reduction now so suppose you had a a hamiltonian path in this graph yeah and the hamiltonian paths would of course visit the vertices so let's say we have a graph with n vertices so graph with n vertices so the Hamilton hamiltonian paths would visit these vertices in some order so it would go maybe start at U1 then go to U2 quality um right it would be some sort of Newtonian path and from here we would get a tour right what's the tour the tour would do the same thing it would start at U1 go to U2 go to un right but it's not quite a tour yet because it's just a path so we sort of just come all the way back so we kind of kind of cycle back okay so the tour is just U1 to u n again it's the same okay the only thing is that we added one more Edge to the tour there's one more age in the tour than there is in a path this Edge is The Edge from u u n back to U1 okay so it's uh the final Edge that you have to take to come back to the starting point and this may or may not be an edge in the original graph okay so the final hop that we make on this tour may not be an edge in the original graph so this tsp tour would have length yeah you would get lengths corresponding to the the edges that you took and there are n minus one of these edges in an N vertex City I mean in an N vertex graph so n minus one of these edges but the final hop may not be an edge so you might have to pay two for this one I think because it's not an edge and the distance between Pairs of things are not connected the graph is two so final hop you might have to pay two all the other hops you would pay one and there are n minus one hops inside of the path and then one final hop so you get a tsp tour of length n plus one okay and that's going to be our budget so the budget is n Plus 1. okay does it make sense okay so so just to kind of uh clarify in the in this particular situation for instance you would have the tour would be e a b d c f so this is the path right so this is the path that we drew before so it's the same as this one but then the final step is to take this Edge back and that's of distance to back to e so you kind of have to come back to e and that's going to be the the last hop and the last hop in this case indeed does not correspond to an edge in the original graph so you pay two and that could happen you could also get lucky that the last hop is an edge in the graph in which case you would only pay n so I should really say that the length here is at most n Plus 1. but in the worst case you could end up being two n Plus 1. okay and that's it so so now we created a distance a tsp instance and we we've just shown that if you have a hamiltonian path in the graph then the tsp instance in the indeed has a tour of length at most n plus one if you want to go the other way it's exactly the same argument or almost exactly the same argument so now let's take an abstract graph instead of a concrete graph because I think the point is better made there so let's imagine that you had some sort of graph with lots of cities right it's many many cities and suppose you have a tsp tour in this graph so it kind of visits every city and ends up somewhere right yeah it's going to visit these cities in I don't know whatever order right but it let's say we have a tsp tour of length n plus one right so this is a tsp tour of length at most n plus one right so there are n edges in this tour it's an N vertex graph so it's a n n cities so you have n edges in this two are all the Hops are a distance one or two so if you have a tour of length at most n plus one you could have at most one hop of distance two right and all the other hops are of distance one each right so you could have at most one hop of distance too so maybe you have this one if this one is of distance two and all the others are a distance one all the way up in here and what that means is that this is not an edge in the original graph but all the others are right all the others are edges in this original graph so what you could do is just remove this Edge and you get a hamiltonian path now you just throw away the edge you get a hamiltonian path okay so if you're given a tsp tour of length at most n plus one you find an edge of length two if there's no edge of length two you know you can remove any Edge you want but there could be an edge of length too so you find that edge and you remove that and that the rest of it is going to be a hamiltonian path the because you only have edges of length one yep so yeah I know any questions or comments or anything to say about that okay so if not let's stop here and so I think we are more or less done with the NP completeness reductions related to graphs and next time when we come back we'll talk about certain other kinds of problems not to do with graphs but to do with sets and we'll see some in more NP completeness reductions there okay so see you on Friday foreign
