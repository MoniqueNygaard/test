for every literal every time it occurs in the formula okay because every time it occurs in the formula it could be used to satisfy a new clause and and we'll have to take another copy to kind of interact with the class Gadget so we'll have to make many different copies of this so let's take a variable X which instead appears twice okay now just once but twice now what we could do of course is make just two copies of this exactly but that wouldn't make sense because then you would you get to choose X to be 0 or 1 in the first copy and then X to be 0 or 1 in the second copy but that that's not allowed right you have to set X to one thing in the whole formula you have to choose it to be zero or one just the one time okay so in order to take care of this we need to create a new Gadget and that will look something like this okay so now there will be kind of this nicer pattern so you have two pairs of snacks and drinks and you have four people now and the and the uh the person at the top of the person on the bottom are kind of they correspond to setting X to Zero so they are identified by the literal not X okay so X appears twice so it could be that X appears twice as not X or X appears twice as X so we are taking care of all possibilities here so the person on the top and the person on the bottom both correspond to not X now OK so they participate in green triples yeah so and they kind of like these snacks and rings and the person on the left and the person on the right kind of correspond to the variable X and they're going to participate in red triples so they kind of like these snacks and rings okay so let's let's draw the whole configuration I hope it's visible because these markers are not great but let's do it so s is it SS s d yes d right so you have the uh the green triples up here the green triples down here and the red triples on the and of course you have these four people right so these are four different uh points in my universe okay and these are four different people and uh so the this person and this person correspond to not X and this person and this person correspond to X okay and so if I choose the the green edges or the The Edge that faces upward and the edge that face is downward the triple Z phase upward and downward then that corresponds to kind of uh feeding the people that correspond to not X which means X is left free to interact with the class Gadget which means X is set to 1 yeah and conversely if I choose the two triples that are facing away to the left and the right uh that means not X is left free to interact with the class Gadget and that's the corresponds to setting X to Zero yeah this makes sense just have to keep straight to you know what what is X setting X to one what is setting X to Zero sort of this is something that can be confusing but essentially there are two ways of uh doing things in this variable Gadget again just two ways uh easier choosing the the top and the bottom triple or the left and the right triple and again that corresponds to setting this variable X to Zero or one okay yeah does this make sense the the definition of the class the variable Gadget and how it works and so there's going to be one for every such variable that appears twice but a variable could of course appear Thrice so if it's Thrice then it would kind of become like a hexagonal pattern so you'd have three green triples and three red triples but the idea is the same okay again there are two ways of choosing to assigning these snacks and drinks to people you could either choose all the green triples like so or you could choose all the red triples like so and these would be the two options so that again corresponds to setting this variable X to two values and setting X to Zero would be choosing the green trip is setting X to one choosing the right sorry I screwed that up setting X to 1 would be choosing the green triple setting X to Zero would be choosing the right triples okay so that's the whole thing so that's the variable Gadget okay so so it's this really pretty thing that yeah you can draw um so uh so you create one for every variable right so for instance in this Three Edge three CNF formula you have three variables that each occurs two twice right each occur two times so you would create a single variable gadget for each of the variables and in this case they're all of the same size but in general of course they could be of different sizes so there's one corresponding to x one one corresponding to x two one correspond to x three so in general if you have an uh three CNN formula with n variables and M clauses then you would create a I guess how many variables in my so the size the variable Gadget would be like so you would have I guess so let's say the first variable appears K1 times and the second variable appears K2 times etcetera etcetera you would have these many uh snacks and drinks right because that's the number of snacks and drinks so if you have ah a very a variable Gadget in which a variable appears twice corresponding to a variable appearing twice you're creating exactly two snacks and two drinks so this is the number of snacks and drinks you would create but you would create twice the number of people right because in every Gadget you have twice as many people as can be fed by the food that you have in that Gadget so lots of people not so much food to go around yet but yeah so this is what we've done so far right so now a bunch of people are going to be hungry after all this right after you 've done this a bunch of people are going to be hungry and they're going to be fed by the Clause gadgets so now what are the Clause gadgets so that's the the last thing so and it's it's very simple so for every Clause you come up with a snack drink pair right you create a meal per clause but that Clause can only be given this meal can only be given to a literal that satisfies the Clause okay not to any old person but just to a little that satisfies the Clause so for instance the first Clause here has the literals X1 not x two and X3 right so you're going so you're going to create a snack drink pair a meal corresponding to this clause but this meal can only be given to people that satisfy this Clause so for instance it can be given to a a person the variable X1 right and not just any variable X1 so sort of you cannot give it to not x one because not x one does not satisfy the class you cannot give it to this one or this one but you can give it to this one for instance that corresponds to setting X1 to true and that would satisfy the Clause so you can so you kind of say that I will choose one person that corresponds to setting X1 to true and I will uh I'm okay with giving the meal correspond to Clause to this one person but I am not okay giving the meal correspond close to this one or this one or even this one I just choose one person because mine is sending X1 to true and I give it okay and the same thing for the the Clause can also be satisfied by dot X2 so you add another uh kind of triple corresponding to that yeah this time you are assigning it to a person that corresponds to setting that the variable X2 to 0. right not setting the variable x 2 to 1 setting X2 to 0. so to not x two and finally of course 2 x 3. okay so you can only give this meal to people that satisfy the Clause right so they have to do they have to work for it uh in this case right and the same thing for the second class right so you can assign it to all these people right so now uh so that's good so does it make sense what we did here yeah so uh we created these Snack drink pairs one for each clause and for these Snack drink pests though only can be given to people that satisfy the Clause right and we've Associated people with literals here so that makes sense so we choose one person uh per variable that sort of satisfies the class and then kind of give it to that person make that a possibility at least all right so now let's kind of see what we've done so now we've added okay so we added some more snacks and Rings we added plus M snacks and things all right and now we're almost done we have to kind of there's a small wrinkle here but we are almost done so uh so what's going to happen right so imagine that you have a satisfying assignment let's see how the reduction would go suppose you have a satisfying assignment to the thing up there so what would be this what would be a satisfying assignment so I guess I could take ah x 1 equals 1 uh maybe take x two equals zero and X3 could be anything so I don't know whatever so 0 say and how does this lead to a matching so we know what we are supposed to do when we set x one equals 1 x 2 equals zero etcetera and the variable Gadget right if I take X Y if I set x 1 equals 1 that sort of corresponds to taking the green triples in the variable Gadget correspond to x one so let me see if I can draw this here so I set x 1 equals 1 so I take the green triples yes ah whoopsie good one so I should thank you yeah thank you thanks so let's take x two equals one instead so the idea is going to be the same so uh yeah so if we take X1 equals 1 and so that corresponds to taking the green edges green triples from the first variable Gadget right so I take the green triple first variable Gadget so these three this person snack and drink are taken care of so you have one person a snack and a drink that's taken care of in a green Gadget but you have one person here on the left and the right that's remaining right and now you have the person on the right it can be kind of assigned to the first Clause up there right to take care of that one so what we are going to do is to take the person on the right and kind of assign it with this class so I don't really have a color for this so let me just use this color that kind of corresponds to satisfying the first clause and similarly for the second Clause I'm setting X2 to 1 so that corresponds to taking the green thing again yeah but that's going to leave a couple of people still hungry and now again we are going to say that X2 equals 1 sort of satisfies the second Clause so what we can do is use one of these so which one am I using up there I guess I'm using the one on the right so I take this thing in a kind of sorry so that's the next one and then finally for X3 I'm setting X3 to 0 that corresponds to taking the right triples and that would kind of feed the people on the left and the right in this gadget and leave the other people on fact okay okay that's it so so we've kind of set the edges corresponding to a variable Gadget that corresponds to a Boolean assignment that we had to the variables it was a satisfying assignment so we also assigned all the food that we created for the Clauses okay so we're almost done right so from a satisfying assignment we get this the only thing is this is not quite a tripartite matching yet because there are people that are still hungry right so and that's just because we created a certain number of snacks and drinks we have a certain number of people but we don't have enough snacks and drinks to go around we have some left over okay and so what we need to do is to kind of take care of a bunch of leftover people we don't know who these people are going to be right because we don't know the satisfying assignment a priority we don't know who these people are going to be but what we know is that we know how many of them they are going to be we know that we are creating these many snacks and drinks a priori we know we have so many people so if you kind of assigned all the snacks and drinks that we have here already to these people then they're going to be a certain number of leftover people that are going to be hungry okay so in this case I guess I don't know what the number is like four or something yeah four people it's always going to be four people are left over in this case okay and in general it's going to be some number so l which I guess is something like um I mean it's a difference of this and this so it's going to be something like this minus m left over people okay so what we what do we do to feed these people right so you're a good host so what you will do is that you will know this beforehand and you will create a bunch of extra meals yeah and these bunch of extra meals are really delicious any anybody would like to have them so you can assign them to anybody and nobody's going to mind yeah so that's the final side so you're going to just connect this to everybody right so I'm not going to draw all of them because it's going to be tedious but all these snacks and drinks can be assigned to everybody at the party so the leftover people can all be given these default meals it's only fair right they waited all this time you want to give them something good okay and that's the whole reduction so in this case we need to create four new Snack drink Pairs and we have to connect them to everybody else that's the that kind of computer and uh does it make sense so sort of what we did okay good so we add L more snacks and drinks okay so that's it so now let's just kind of conclude by seeing why this is a reduction but it's it's almost what we did already but let's kind of go through the process so if we had a satisfying assignment here right on the the side of the formula you would create a tripartite matching by you know you would choose the triples in the variable Gadget so you choose the triple in the variable Gadget according to the satisfying assignment right so if you set x one to one you choose the green green pair and if X1 to zero you choose the red pair and so on you do this for all the variables and you choose the triples in the variable Gadget and then for each clause for each Clause you choose a triple that kind of satisfies that Clause right you choose a triple using a literal that satisfies the clause right so for instance here of course ok so the way I my satisfying assignment was uh I could only satisfy the I only satisfy the Clause with x one so I have to choose this triple but if I change my satisfying assignment a little bit if I instead had X3 equals 1 here I could have choose I could have chosen either the triple containing the clause and the snack in a drink respond or clause and x one or the triple continuous snack and drink correspond to clause and x three the thing that goes all the way to the right so I don't know if it's clear from where I'm pointing but I could have chosen either this triple the one that we chose in on the picture or we could have chosen this triple the one that contains this Edge I mean this vertex and this the snack entering pair you could choose either chosen either one of them to satisfy the clause so for each Clause we can choose any triple that contains well not the literal but a literal that satisfies Clause there could be multiple such literals you just choose one okay and once you're done with all that you've assigned all the food you kind of allocated all the food that you made up front and then you give the default menu to the rest so so the main so default menu to the rest and that's that's how you create in general a tripartite matching from a satisfying assignment and conversely if you're given a tripartite matching you know you would kind of just go back to the variable Gadget and you kind of extract a satisfying assignment from it depending on what kind of triples you chose in the variable Gadget which is a green then you choose one if it's a red you choose zero and yeah that about does it actually um are there any kind of any questions that you'd like to kind of ask or comments or anything okay so if not I think that's all I have for today we are ending a little bit early but I think it's fair because last time it was a kind of a heavy lecture so we'll stop this time and yeah we'll come back the next time and we will see more reductions but this time to do with problems regarding numbers in various ways okay so this is going to be the last uh lecture in the NP completions module and yeah they'll be fairly different problems the next time around so see you then thank you
